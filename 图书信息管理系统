#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_BOOKS 100  // 最多存储100本书籍

// 书籍结构体
typedef struct book {
    char title[100];    // 书名
    char author[50];    // 作者
    int id;             // 书籍编号
    int quantity;       // 库存数量
} Book;

// 全局变量
Book books[MAX_BOOKS];  // 存储所有书籍
int num_books = 0;      // 当前存储的书籍数量

// 函数声明
void add_book();
void delete_book();
void find_book();
void display_books();
void borrow_book();
void return_book();

// 主函数
int main() {
    int choice;
    while (1) {
        printf("\n欢迎使用图书管理系统\n");
        printf("1. 添加图书\n");
        printf("2. 删除图书\n");
        printf("3. 查找图书\n");
        printf("4. 显示所有图书\n");
        printf("5. 借出图书\n");
        printf("6. 归还图书\n");
        printf("0. 退出系统\n");
        printf("请选择功能：");
        scanf("%d", &choice);
        switch (choice) {
            case 0:
                printf("感谢使用图书管理系统，再见！\n");
                exit(0);
            case 1:
                add_book();
                break;
            case 2:
                delete_book();
                break;
            case 3:
                find_book();
                break;
            case 4:
                display_books();
                break;
            case 5:
                borrow_book();
                break;
            case 6:
                return_book();
                break;
            default:
                printf("无效的选择，请重新输入。\n");
        }
    }
    return 0;
}

// 添加图书
void add_book() {
    if (num_books == MAX_BOOKS) {
        printf("存储空间已满，无法添加新书。\n");
        return;
    }
    Book book;
    printf("请输入书名：");
    scanf("%s", book.title);
    printf("请输入作者名：");
    scanf("%s", book.author);
    printf("请输入书籍编号：");
    scanf("%d", &book.id);
    printf("请输入库存数量：");
    scanf("%d", &book.quantity);
    books[num_books++] = book;
    printf("添加成功！\n");
}

// 删除图书
void delete_book() {
    int id;
    printf("请输入要删除的书籍编号：");
    scanf("%d", &id);
    for (int i = 0; i < num_books; i++) {
        if (books[i].id == id) {
            for (int j = i; j < num_books - 1; j++) {
                books[j] = books[j + 1];
            }
            num_books--;
            printf("删除成功！\n");
            return;
        }
    }
    printf("找不到指定的书籍。\n");
}

// 查找图书
void find_book() {
int choice;
printf("请选择查找方式：\n");
printf("1. 书籍编号\n");
printf("2. 书名\n");
printf("3. 作者\n");
scanf("%d", &choice);
switch (choice) {
case 1:
{
int id;
printf("请输入书籍编号：");
scanf("%d", &id);
for (int i = 0; i < num_books; i++) {
if (books[i].id == id) {
printf("书名：%s\n", books[i].title);
printf("作者：%s\n", books[i].author);
printf("库存数量：%d\n", books[i].quantity);
return;
}
}
printf("找不到指定的书籍。\n");
break;
}
case 2:
{
char title[100];
printf("请输入书名：");
scanf("%s", title);
for (int i = 0; i < num_books; i++) {
if (strcmp(books[i].title, title) == 0) {
printf("书籍编号：%d\n", books[i].id);
printf("作者：%s\n", books[i].author);
printf("库存数量：%d\n", books[i].quantity);
return;
}
}
printf("找不到指定的书籍。\n");
break;
}
case 3:
{
char author[50];
printf("请输入作者名：");
scanf("%s", author);
for (int i = 0; i < num_books; i++) {
if (strcmp(books[i].author, author) == 0) {
printf("书籍编号：%d\n", books[i].id);
printf("书名：%s\n", books[i].title);
printf("库存数量：%d\n", books[i].quantity);
return;
}
}
printf("找不到指定的书籍。\n");
break;
}
default:
printf("无效的选择，请重新输入。\n");
}
}

// 显示所有图书
void display_books() {
if (num_books == 0) {
printf("暂无书籍信息。\n");
return;
}
printf("编号\t书名\t\t作者\t\t库存数量\n");
for (int i = 0; i < num_books; i++) {
printf("%d\t%s\t\t%s\t\t%d\n", books[i].id, books[i].title, books[i].author, books[i].quantity);
}
}

// 借出图书
void borrow_book() {
int id;
printf("请输入要借出的书籍编号：");
scanf("%d", &id);
for (int i = 0; i < num_books; i++) {
if (books[i].id == id) {
if (books[i].quantity > 0) {
books[i].quantity--;
printf("借出成功！\n");
} else {
printf("库存不足，无法借出。\n");
}
return;
}
}
printf("找不到指定的书籍。\n");
}

// 归还图书
void return_book() {
int id;
printf("请输入要归还的书籍编号：");
scanf("%d", &id);
for (int i = 0; i < num_books; i++) {
if (books[i].id == id) {
books[i].quantity++;
printf("归还成功！\n");
return;
}
}
printf("找不到指定的书籍。\n");
}

// 添加图书
void add_book() {
if (num_books == MAX_BOOKS) {
printf("库存已满，无法添加。\n");
return;
}
printf("请输入书籍信息：\n");
printf("书籍编号：");
scanf("%d", &books[num_books].id);
printf("书名：");
scanf("%s", books[num_books].title);
printf("作者：");
scanf("%s", books[num_books].author);
printf("库存数量：");
scanf("%d", &books[num_books].quantity);
num_books++;
printf("添加成功！\n");
}

// 删除图书
void delete_book() {
int id;
printf("请输入要删除的书籍编号：");
scanf("%d", &id);
for (int i = 0; i < num_books; i++) {
if (books[i].id == id) {
for (int j = i; j < num_books - 1; j++) {
books[j] = books[j+1];
}
num_books--;
printf("删除成功！\n");
return;
}
}
printf("找不到指定的书籍。\n");
}

// 主函数
int main() {
int choice;
while (1) {
printf("欢迎使用图书管理系统！\n");
printf("1. 查找图书\n");
printf("2. 显示所有图书\n");
printf("3. 借出图书\n");
printf("4. 归还图书\n");
printf("5. 添加图书\n");
printf("6. 删除图书\n");
printf("0. 退出系统\n");
printf("请选择操作：");
scanf("%d", &choice);
switch (choice) {
case 1:
find_book();
break;
case 2:
display_books();
break;
case 3:
borrow_book();
break;
case 4:
return_book();
break;
case 5:
add_book();
break;
case 6:
delete_book();
break;
case 0:
printf("感谢使用图书管理系统！\n");
return 0;
default:
printf("无效的选择，请重新输入。\n");
}
}
return 0;
}
